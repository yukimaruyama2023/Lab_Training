2-13
実行結果
    printf("Alignment of int:%zu\n", alignof(int));
    printf("Alignment of long:%zu\n", alignof(long));
    printf("Alignment of long long:%zu\n", alignof(long long));
    printf("Alignment of float:%zu\n", alignof(float));
    printf("Alignment of double:%zu\n", alignof(double));

2-14
show()を次のように定義した。

    void show(struct Point *p){
        int x = *(int *)p;
        int y = *(int *)(p + 4);
        int color = *(int *)(p + 8);
        printf("(%d, %d) color:%d\n", x, y, color);
    }

int x = *(int *)p; は、struct Point型のpを、int型のポインタにキャストし、pの指すメモリには4バイトのデータが格納されていることとし、
その格納されている値をxに代入している。x, yはint型なので、yのアドレスはp+4であるし、colorのアドレスはp+8であるので、この定義により、関数show()は、
struct ColoredPoint型の変数を受け取っても値を表示できるようになる。

3-3
実行結果：
before_foo  =  100,  after_foo  =  200

理由：
bar()を呼び出したときに、zはスタック上の変数yを指す。仮にこのアドレスをvとする。barの呼び出し後は変数yのメモリが解放され、スタックポインタが4だけ増やされ、v＋４となる。
その後fooを呼び出すと、変数xを割り当てられるためにアドレスvから４バイト分のメモリが確保され、値200が格納される。zはアドレスvを格納したままなので、
after_foo = *zoo では200がafter_zooに代入される。

3-4
「ローカル変数yに関連するスタックメモリのアドレスが返される。」という意味である。スタックメモリに格納されていた変数のアドレスを返すと、その変数が解放されたときに
未定義のメモリ領域を参照できるようになってしまうので警告が出る。

3-5
1.
実行結果：
z @ 0x7fff36a5f78c
y @ 0x7fff36a5f75c
x @ 0x7fff36a5f72c

予測：
z @ 0x7fff36a5f790
y @ 0x7fff36a5f760
x @ 0x7fff36a5f730

2.
実行結果：
y @ 0x7ffffcc9011c
y @ 0x7ffffcc900dc
y @ 0x7ffffcc9009c
z @ 0x7ffffcc9014c

予測：
y @ 0x7ffffcc90124
y @ 0x7ffffcc900e4
y @ 0x7ffffcc900a4
z @ 0x7ffffcc90150

3.
実行結果
z @ 0x16bcff24b
y @ 0x16bcff220
z @ 0x16bcff1fb
y @ 0x16bcff1d0
w @ 0x16bcff278

予測：
z @ 0x16bcff24f
y @ 0x16bcff22c
z @ 0x16bcff1ff
y @ 0x16bcff1dc
w @ 0x16bcff27c

3-6

1.
    z @ 0x7fff4b43505c
    rbp z @ 7fff4b435070
    y @ 0x7fff4b43502c
    rbp y @ 7fff4b435040
    x @ 0x7fff4b434ffc
    rbp x @ 7fff4b435010
2.
    y @ 0x7ffffcc9011c
    rbp y @ 7ffffcc90130
    y @ 0x7ffffcc900dc
    rbp y @ 7ffffcc900f0
    y @ 0x7ffffcc9009c
    rbp y @ 7ffffcc900b0
    z @ 0x7ffffcc9014c
    rbp z @ 7ffffcc90160

3.
    z @ 0x7ffd1812a10f
    rbp z @ 7ffd1812a120
    y @ 0x7ffd1812a0c8
    rbp y @ 7ffd1812a0e0
    z @ 0x7ffd1812a08f
    rbp z @ 7ffd1812a0a0
    y @ 0x7ffd1812a048
    rbp y @ 7ffd1812a060
    w @ 0x7ffd1812a13c
    rbp w @ 7ffd1812a150

3-7
インライン関数では、その関数を呼び出したその場のメモリ上にコードを展開する。すなわち、新しい関数のメモリにジャンプすることがないので、関数fの中でget_rbp()を呼び出せば
関数f()のrbpを得ることができる。インライン展開できないとget_rbp()を呼び出したときに、メモリがジャンプしてしまうのでf()のrbpではなく、
get_rbp()のrbpを得られてしまうため。







